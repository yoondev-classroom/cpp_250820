// 3_변수4.cpp
#include <iostream>
using namespace std;

#if 0
int main()
{
    int x[3] = {10, 20, 30};
    // x의 타입은 int[3] 타입니다.

    int *p = x;
    // p의 타입은 int* 타입입니다.
    // C/C++
    //  => 배열의 식별자(x)는 배열의 첫번째 원소의 주소로 해석됩니다.
    //  => Decay
    //  int* p = &x[0]

    //     [0] [1] [2]
    // x: [10][20][30]

    cout << x[0] << endl;
    cout << x[1] << endl;
    cout << x[2] << endl;

    // 포인터 변수
    //  => 메모리의 주소를 저장하는 변수
    //     저장된 주소를 통해 해당 메모리에 접근해서 값을 읽거나 변경할 수 있습니다.
}
#endif

// C++11, Type deduction
// => auto
// => 우항의 타입에 의해 컴파일 시간에 변수의 타입이 결정됩니다.
//   : 의존성 있는 타입을 표현할 때 유용합니다.
//     의존하는 변수의 타입이 변경되어도, 코드를 변경할 필요가 없습니다.

int main()
{
    int x[3] = {10, 20, 30};

    // int *p = x;
    // p의 타입은 x의 타입에 의존성이 있습니다.
    // => x의 타입이 변경될때마다 p의 타입도 수정되어야 합니다.

    auto p = x;
    // auto: 우항의 타입에 의해 타입이 컴파일 시간에 결정됩니다.

    cout << x[0] << endl;
    cout << x[1] << endl;
    cout << x[2] << endl;

    // auto p2; // 허용되지 않습니다.
}